'use strict';

var mimicTrading = angular.module('mimicTrading', [
	'ui.router',
	'ngAnimate',
	'ngMessages',
	'LocalStorageModule',
	'ui.bootstrap', 
    'oc.lazyLoad',  
    'ngSanitize',
	'angular-ladda'
]);
'use strict';

/* Application routes */
mimicTrading.config(['$stateProvider', '$urlRouterProvider',function($stateProvider, $urlRouterProvider){
	$urlRouterProvider.otherwise('/');
	$stateProvider
	.state('login',{
		url: '/',
		controller: 'loginCtrl',
		templateUrl: '/admin/login/views/login.html',
		authenticate: false,
		data: {pageTitle: 'Login'},
		resolve: {
		    deps: ['$ocLazyLoad', function($ocLazyLoad) {
		        return $ocLazyLoad.load({
		            name: 'mimicTrading',
		            insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
		            files: [
		                '/assets/css/admin-style.css'
		            ] 
		        });
		    }]
		},
	})
	.state('dashboard',{
		url: '/dashboard',
		controller: 'dashboardCtrl',
		templateUrl: '/admin/dashboard/views/dashboard.html',
		data: {pageTitle: 'Admin Dashboard Template'},
		resolve: {
		    deps: ['$ocLazyLoad', function($ocLazyLoad) {
		        return $ocLazyLoad.load({
		            name: 'mimicTrading',
		            insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
		            files: [
		                '/assets/global/plugins/morris/morris.css',                            
		                '/assets/global/plugins/morris/morris.min.js',
		                '/assets/global/plugins/morris/raphael-min.js',                            
		                '/assets/global/plugins/jquery.sparkline.min.js',

		                '/assets/pages/scripts/dashboard.min.js',
		                '/admin/dashboard/dashboardCtrl.js',
		            ] 
		        });
		    }]
		},
		authenticate: true
	});
}]);
'use strict';

/* Application config */
/*Angular interceptors are service factories that are registered with the $httpProvider */
mimicTrading.config(['$httpProvider', function($httpProvider){
	var interceptor = ['$q', '$rootScope', function ($q, $rootScope) {
        return {
        	request: function (config) {
	           	return config;
	       	},

            requestError: function (rejection) {
                return $q.reject(rejection);
            },

            response: function (response) {
                return response || $q.when(response);
            },

            // Revoke client authentication if 400 is received
            responseError: function (rejection) {
                if(rejection.status <= 0) {
                    $rootScope.$broadcast('server_error',{message:'ERR_CONNECTION_REFUSED'});
                    return;
                }
                return $q.reject(rejection);
            }
        };
    }];

	$httpProvider.interceptors.push(interceptor);
}])
.config(['$compileProvider', function ($compileProvider) {
  $compileProvider.debugInfoEnabled(false);
}])
.config(['laddaProvider', function (laddaProvider) {
    laddaProvider.setOption({
        style: 'zoom-in',
    });
}])
.config(['$ocLazyLoadProvider', function($ocLazyLoadProvider) {
    $ocLazyLoadProvider.config({
        // global configs go here
    });
}])
.run(['$location','$rootScope','loginSrv','$state','localStorageService','$timeout',
	function($location, $rootScope, loginSrv, $state,localStorageService, $timeout){

		$rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
            $rootScope.isPageLoading = true; 
            if (toState.authenticate && !loginSrv.isLogged && !localStorageService.get('admin')){
                loginSrv.isLogged = false;
                $state.go("login");
                event.preventDefault(); 
            }else {
                var token = localStorageService.get('token');
                if($location.path() === '/' && token ){
                    $location.path('/dashboard');
                }
            }
		});

        $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
            $rootScope.isPageLoading = false;
        });

        /* This will logout the admin from the application */
        $rootScope.clearToken = function () {
            localStorageService.remove('token');
            localStorageService.remove('admin');
            delete $rootScope.admin;
            loginSrv.isLogged = false;
            $state.go("login");
        };

        // Set the admin for entire application
        $rootScope.admin = localStorageService.get('admin');

        // If any global error occured
        $rootScope.$on('server_error', function (event, res) {
            $rootScope.server_error_message = res.message;
        });
    }
]);
'use strict';

mimicTrading.factory('settings', ['$rootScope', function($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout3',
    };

    $rootScope.settings = settings;

    return settings;
}])
/* Setup App Main Controller */
.controller('AppController', ['$scope', '$rootScope', function($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function() {
        App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 
    });
}])

/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
.controller('HeaderController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initHeader(); // init header
    });
}])

/* Setup Layout Part - Sidebar */
.controller('SidebarController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initSidebar($state); // init sidebar
    });
}])

/* Setup Layout Part - Quick Sidebar */
.controller('QuickSidebarController', ['$scope', function($scope) {    
    $scope.$on('$includeContentLoaded', function() {
       setTimeout(function(){
            QuickSidebar.init(); // init quick sidebar        
        }, 2000);
    });
}])

/* Setup Layout Part - Sidebar */
.controller('PageHeadController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {        
        Demo.init(); // init theme panel
    });
}])

/* Setup Layout Part - Theme Panel */
.controller('ThemePanelController', ['$scope', function($scope) {    
    $scope.$on('$includeContentLoaded', function() {
        Demo.init(); // init theme panel
    });
}])

/* Setup Layout Part - Footer */
.controller('FooterController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initFooter(); // init footer
    });
}])
.run(["$rootScope", "settings", "$state", function($rootScope, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view
}]);
'use strict';


/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)
mimicTrading.directive('ngSpinnerBar', ['$rootScope', '$state',
    function($rootScope, $state) {
        return {
            link: function(scope, element, attrs) {
                // by defult hide the spinner bar
                element.addClass('hide'); // hide spinner bar by default

                // display the spinner bar whenever the route changes(the content part started loading)
                $rootScope.$on('$stateChangeStart', function() {
                    element.removeClass('hide'); // show spinner bar
                    Layout.closeMainMenu();
                });

                // hide the spinner bar on rounte change success(after the content loaded)
                $rootScope.$on('$stateChangeSuccess', function(event) {
                    element.addClass('hide'); // hide spinner bar
                    $('body').removeClass('page-on-load'); // remove page loading indicator
                    Layout.setAngularJsMainMenuActiveLink('match', null, event.currentScope.$state); // activate selected link in the sidebar menu
                   
                    // auto scorll to page top
                    setTimeout(function () {
                        App.scrollTop(); // scroll to the top on content load
                    }, $rootScope.settings.layout.pageAutoScrollOnLoad);     
                });

                // handle errors
                $rootScope.$on('$stateNotFound', function() {
                    element.addClass('hide'); // hide spinner bar
                });

                // handle errors
                $rootScope.$on('$stateChangeError', function() {
                    element.addClass('hide'); // hide spinner bar
                });
            }
        };
    }
])

// Handle global LINK click
.directive('a',
    function() {
        return {
            restrict: 'E',
            link: function(scope, elem, attrs) {
                if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                    elem.on('click', function(e) {
                        e.preventDefault(); // prevent link click for above criteria
                    });
                }
            }
        };
    })

// Handle Dropdown Hover Plugin Integration
.directive('dropdownMenuHover', function () {
  return {
    link: function (scope, elem) {
      elem.dropdownHover();
    }
  };  
});
'use strict';
mimicTrading.controller('loginCtrl', ['$scope', '$state', 'RestSvr', 'loginSrv', '$rootScope', '$log','$timeout',
	function($scope, $state, RestSvr, loginSrv, $rootScope, $log, $timeout){

		$scope.login = function (isValid) {
			if( !isValid ){
				return;
			}
			$scope.isLoading = true;
			RestSvr.login('/admin/login', $scope.user)
			.then(function (response) {
				$scope.isLoading = false;
				if( response.errors ) {
					$scope.message = response.message;
				} else {
					loginSrv.initAdminSession(response.user, response.token);
					$state.go('dashboard');	
				}
			});
		};
	}
]);
'use strict';

mimicTrading.factory('RestSvr', ['$http', '$window', '$httpParamSerializerJQLike',function ($http, $window, $httpParamSerializerJQLike) {
	function baseUrl(apiUrl) {
		var baseUrl = $window.location.protocol + '//' + '100.100.7.76:8010';
		return 	baseUrl + apiUrl;
	}
	
	return{
		search: function (apiUrl, data, queryString) {
			var q = !angular.isUndefined(queryString) ? '?' + queryString : '';
			return $http.post((apiUrl + q), data).then(function(response){
				return (response.data.errors) ? 
				{ errors: response.data.errors }:
				{ records: response.data.data.records, paging: response.data.data.paging };
			}, function(response){
				return {
					errors: response.data.errors
				};
			});
		},
		login: function(apiUrl, data){
			var req = {
				method: 'POST',
				url: baseUrl(apiUrl),
			 	headers: { 'Content-Type': 'application/x-www-form-urlencoded'},
			 	data: $httpParamSerializerJQLike(data)
			};
			return $http(req).then(function(response){
				return {
					result: response.data.message, 
					user: response.data.user,
					token: response.data.token
				};
			}, function(response){
				return {
					errors: true,
					message: response.data.message
				};
			});
		},
		paginate: function(apiUrl, params, queryString, config){
			var p = !angular.isUndefined(params) ? params : '';
			var q = !angular.isUndefined(queryString) ? '?' + queryString : '';
			return $http.get((apiUrl + p + q), config).then(function(response){
				return (response.data.errors) ? 
				{ errors: response.data.errors }:
				{
					records: response.data.data.records,
					paging: response.data.data.paging,
					group: response.data.data.group,
				};
			});
		},
		get: function(apiUrl, params){
			var p = !angular.isUndefined(params) ? params : null;
			return $http.get(apiUrl, p).then(function(response){
				return {
					record: response.data.data.record
				};
			});
		},
		getById: function(apiUrl, id){
			return $http.get(apiUrl + id).then(function(response){
				return {
					record: response.data
				};
			});	
		},
		post: function(apiUrl, data){
			return $http.post(apiUrl, data).then(function(response){
				return (response.data.errors) ? 
				{ errors: response.data.errors }:
				{
					result: response.data.data.success, 
					message: response.data.data.message, 
					data: response.data.data.record
				};
			}, function(response){
				return {
					errors: response.data.errors
				};
			});
		},
		put: function(apiUrl, id, data, config){
			var c = !angular.isUndefined(config) ? config : null;
			return $http.put((apiUrl + id), data, c).then(function(response){
				return (response.data.errors) ? 
				{ errors: response.data.errors }:
				{
					result: response.data.data.success, 
					message: response.data.data.message, 
					data: response.data.data.record
				};
			}, function(response){
				return {
					errors: response.data.errors
				};
			});
		},
		delete: function(apiUrl, id){
			return $http.delete(apiUrl + id).then(function(response){
				return (response.data.errors) ? 
				{ errors: response.data.errors }:
				{
					message: response.data.data.message,
					result: response.data.data.success
				};
			}, function(response){
				return {
					errors: response.data.errors
				};
			});	
		}
	};
}]);
'use strict';

mimicTrading.factory('settings', ['$rootScope', function($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000, // auto scroll to top on page load
            hideLoginForm: false // auto scroll to top on page load
        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout3',
    };

    $rootScope.settings = settings;

    return settings;
}]);
'use strict';

mimicTrading.factory('loginSrv', ['localStorageService', '$rootScope', function (localStorageService, $rootScope) {
    return {
    	isLogged: false,
    	initAdminSession: function (admin, token) {
    		this.isLogged = true;
    		localStorageService.set('token', token);
    		localStorageService.set('admin', admin);
    		$rootScope.admin = localStorageService.get('admin');
    	}
    };
}]);